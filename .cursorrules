# MiniPyEngine - Cursor AI 开发规则

## 🎯 项目概述
MiniPyEngine是一个用于学习游戏引擎开发的轻量级Python游戏引擎，采用ECS架构，支持3D渲染、资产加载和Scene管理。

## 📋 核心开发原则

### 1. 简化架构设计
- **Scene系统**: 所有Entity都必须存在于Scene中，包括Camera等特殊实体
- **统一管理**: 不区分GameObject和其他Entity，在Scene中统一管理
- **直接API**: 使用简洁直接的方法名，避免过度抽象
- **清晰职责**: Scene负责Entity管理，ECS负责组件和系统管理

### 2. ECS架构规范
- 保持Entity-Component-System的清晰分离
- Scene作为所有Entity的容器和管理器
- Component应该是纯数据载体，避免包含复杂逻辑
- System负责处理组件间的交互和更新逻辑
- 支持Scene级别的组件查询和Entity管理

### 3. 代码质量标准
- 使用中文注释说明复杂逻辑
- 保持代码简洁易读，便于学习和理解
- 优先考虑教育价值而非极致性能优化
- 确保每个功能都有相应的测试和文档

## 🔄 自动化工作流程

### 1. 变更日志管理
**重要**: 每当生成代码diff或进行重要修改时，必须自动更新变更日志

#### 操作步骤:
1. 在`docs/changelog.md`中添加新条目
2. 使用以下格式记录变更:
```markdown
## [日期] - 版本标识

### 🚀 新增功能
- 功能描述

### 🔧 改进优化  
- 改进内容

### 🐛 问题修复
- 修复内容

### 📁 文件变更
- 新增文件列表
- 修改文件列表
- 删除文件列表
```

#### 自动化要求:
- 每次代码生成后，自动分析变更内容
- 提取关键功能点和技术改进
- 生成简洁但完整的变更摘要
- 确保变更日志的连续性和可追溯性

### 2. 文档同步更新
- 当核心功能发生变化时，同步更新README.md
- 为新组件和系统生成相应的文档
- 保持API文档与代码实现的一致性

## 🏗️ 开发规范

### 1. 文件组织规范
```
MiniPyEngine/
├── core/
│   ├── ecs.py          # ECS核心系统
│   ├── scene.py        # Scene和SceneManager
│   └── main_loop.py    # 主循环
├── Entity/             # 实体管理
├── components/         # 组件系统
├── systems/           # 系统逻辑 
├── graphics/          # 渲染系统
├── resource_manager/  # 资源管理
├── resources/         # 资源文件
├── tests/             # 测试文件
└── docs/              # 文档
```

### 2. Scene系统规范
- **Scene**: 管理所有Entity的容器，提供查询和组织功能
- **SceneManager**: 全局场景管理，支持场景切换和加载
- **Entity**: 所有实体都必须存在于Scene中，包括Camera等特殊实体
- **ECS集成**: ECS系统自动集成Scene管理

### 3. API设计原则
- **简洁性**: 使用直接的方法名，避免冗余的别名
- **一致性**: 统一的命名规范和参数设计
- **可读性**: 方法名能清楚表达其功能
- **教育性**: API设计有助于理解游戏引擎概念

## 🎯 特殊指令

### 当进行以下操作时，务必同时更新changelog:
1. 添加新的Scene功能
2. 修改Entity管理方式
3. 更新ECS与Scene的集成
4. 添加新的查询和搜索功能
5. 改进场景切换和加载
6. 修复Scene相关bug
7. 重构Scene系统架构
8. 简化或改进API设计

### 架构一致性检查清单:
- [ ] 新Entity是否正确添加到Scene中？
- [ ] API设计是否简洁直接？
- [ ] Entity管理是否通过Scene进行？
- [ ] 是否避免了循环依赖？
- [ ] 组件查询是否通过Scene进行？

---

**Remember**: 本引擎专为学习目的构建，始终优先考虑清晰性和教育价值。保持简洁的架构设计，确保代码易于理解和维护。 